package com.helger.commons.collection;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import com.helger.commons.annotation.ReturnsImmutableObject;
import com.helger.commons.annotation.ReturnsMutableCopy;
import com.helger.commons.collection.impl.NonBlockingStack;

public final class PrimitiveCollectionHelper
{
  private PrimitiveCollectionHelper ()
  {}

  // The code below is generated by MainCreateCollectionHelperCode

  @Nonnull
  @ReturnsMutableCopy
  public static ArrayList <Boolean> newPrimitiveList (@Nullable final boolean... aValues)
  {
    final ArrayList <Boolean> ret = CollectionHelper.newList ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Boolean> newUnmodifiablePrimitiveList (@Nullable final boolean... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveList (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static ArrayList <Byte> newPrimitiveList (@Nullable final byte... aValues)
  {
    final ArrayList <Byte> ret = CollectionHelper.newList ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Byte> newUnmodifiablePrimitiveList (@Nullable final byte... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveList (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static ArrayList <Character> newPrimitiveList (@Nullable final char... aValues)
  {
    final ArrayList <Character> ret = CollectionHelper.newList ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Character> newUnmodifiablePrimitiveList (@Nullable final char... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveList (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static ArrayList <Double> newPrimitiveList (@Nullable final double... aValues)
  {
    final ArrayList <Double> ret = CollectionHelper.newList ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Double> newUnmodifiablePrimitiveList (@Nullable final double... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveList (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static ArrayList <Float> newPrimitiveList (@Nullable final float... aValues)
  {
    final ArrayList <Float> ret = CollectionHelper.newList ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Float> newUnmodifiablePrimitiveList (@Nullable final float... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveList (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static ArrayList <Integer> newPrimitiveList (@Nullable final int... aValues)
  {
    final ArrayList <Integer> ret = CollectionHelper.newList ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Integer> newUnmodifiablePrimitiveList (@Nullable final int... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveList (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static ArrayList <Long> newPrimitiveList (@Nullable final long... aValues)
  {
    final ArrayList <Long> ret = CollectionHelper.newList ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Long> newUnmodifiablePrimitiveList (@Nullable final long... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveList (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static ArrayList <Short> newPrimitiveList (@Nullable final short... aValues)
  {
    final ArrayList <Short> ret = CollectionHelper.newList ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Short> newUnmodifiablePrimitiveList (@Nullable final short... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveList (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static Vector <Boolean> newPrimitiveVector (@Nullable final boolean... aValues)
  {
    final Vector <Boolean> ret = CollectionHelper.newVector ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Boolean> newUnmodifiablePrimitiveVector (@Nullable final boolean... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveVector (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static Vector <Byte> newPrimitiveVector (@Nullable final byte... aValues)
  {
    final Vector <Byte> ret = CollectionHelper.newVector ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Byte> newUnmodifiablePrimitiveVector (@Nullable final byte... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveVector (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static Vector <Character> newPrimitiveVector (@Nullable final char... aValues)
  {
    final Vector <Character> ret = CollectionHelper.newVector ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Character> newUnmodifiablePrimitiveVector (@Nullable final char... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveVector (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static Vector <Double> newPrimitiveVector (@Nullable final double... aValues)
  {
    final Vector <Double> ret = CollectionHelper.newVector ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Double> newUnmodifiablePrimitiveVector (@Nullable final double... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveVector (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static Vector <Float> newPrimitiveVector (@Nullable final float... aValues)
  {
    final Vector <Float> ret = CollectionHelper.newVector ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Float> newUnmodifiablePrimitiveVector (@Nullable final float... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveVector (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static Vector <Integer> newPrimitiveVector (@Nullable final int... aValues)
  {
    final Vector <Integer> ret = CollectionHelper.newVector ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Integer> newUnmodifiablePrimitiveVector (@Nullable final int... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveVector (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static Vector <Long> newPrimitiveVector (@Nullable final long... aValues)
  {
    final Vector <Long> ret = CollectionHelper.newVector ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Long> newUnmodifiablePrimitiveVector (@Nullable final long... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveVector (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static Vector <Short> newPrimitiveVector (@Nullable final short... aValues)
  {
    final Vector <Short> ret = CollectionHelper.newVector ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Short> newUnmodifiablePrimitiveVector (@Nullable final short... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveVector (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static HashSet <Boolean> newPrimitiveSet (@Nullable final boolean... aValues)
  {
    final HashSet <Boolean> ret = CollectionHelper.newSet ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Boolean> newUnmodifiablePrimitiveSet (@Nullable final boolean... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static HashSet <Byte> newPrimitiveSet (@Nullable final byte... aValues)
  {
    final HashSet <Byte> ret = CollectionHelper.newSet ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Byte> newUnmodifiablePrimitiveSet (@Nullable final byte... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static HashSet <Character> newPrimitiveSet (@Nullable final char... aValues)
  {
    final HashSet <Character> ret = CollectionHelper.newSet ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Character> newUnmodifiablePrimitiveSet (@Nullable final char... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static HashSet <Double> newPrimitiveSet (@Nullable final double... aValues)
  {
    final HashSet <Double> ret = CollectionHelper.newSet ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Double> newUnmodifiablePrimitiveSet (@Nullable final double... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static HashSet <Float> newPrimitiveSet (@Nullable final float... aValues)
  {
    final HashSet <Float> ret = CollectionHelper.newSet ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Float> newUnmodifiablePrimitiveSet (@Nullable final float... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static HashSet <Integer> newPrimitiveSet (@Nullable final int... aValues)
  {
    final HashSet <Integer> ret = CollectionHelper.newSet ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Integer> newUnmodifiablePrimitiveSet (@Nullable final int... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static HashSet <Long> newPrimitiveSet (@Nullable final long... aValues)
  {
    final HashSet <Long> ret = CollectionHelper.newSet ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Long> newUnmodifiablePrimitiveSet (@Nullable final long... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static HashSet <Short> newPrimitiveSet (@Nullable final short... aValues)
  {
    final HashSet <Short> ret = CollectionHelper.newSet ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Short> newUnmodifiablePrimitiveSet (@Nullable final short... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static LinkedHashSet <Boolean> newPrimitiveOrderedSet (@Nullable final boolean... aValues)
  {
    final LinkedHashSet <Boolean> ret = CollectionHelper.newOrderedSet ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Boolean> newUnmodifiablePrimitiveOrderedSet (@Nullable final boolean... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveOrderedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static LinkedHashSet <Byte> newPrimitiveOrderedSet (@Nullable final byte... aValues)
  {
    final LinkedHashSet <Byte> ret = CollectionHelper.newOrderedSet ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Byte> newUnmodifiablePrimitiveOrderedSet (@Nullable final byte... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveOrderedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static LinkedHashSet <Character> newPrimitiveOrderedSet (@Nullable final char... aValues)
  {
    final LinkedHashSet <Character> ret = CollectionHelper.newOrderedSet ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Character> newUnmodifiablePrimitiveOrderedSet (@Nullable final char... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveOrderedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static LinkedHashSet <Double> newPrimitiveOrderedSet (@Nullable final double... aValues)
  {
    final LinkedHashSet <Double> ret = CollectionHelper.newOrderedSet ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Double> newUnmodifiablePrimitiveOrderedSet (@Nullable final double... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveOrderedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static LinkedHashSet <Float> newPrimitiveOrderedSet (@Nullable final float... aValues)
  {
    final LinkedHashSet <Float> ret = CollectionHelper.newOrderedSet ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Float> newUnmodifiablePrimitiveOrderedSet (@Nullable final float... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveOrderedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static LinkedHashSet <Integer> newPrimitiveOrderedSet (@Nullable final int... aValues)
  {
    final LinkedHashSet <Integer> ret = CollectionHelper.newOrderedSet ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Integer> newUnmodifiablePrimitiveOrderedSet (@Nullable final int... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveOrderedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static LinkedHashSet <Long> newPrimitiveOrderedSet (@Nullable final long... aValues)
  {
    final LinkedHashSet <Long> ret = CollectionHelper.newOrderedSet ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Long> newUnmodifiablePrimitiveOrderedSet (@Nullable final long... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveOrderedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static LinkedHashSet <Short> newPrimitiveOrderedSet (@Nullable final short... aValues)
  {
    final LinkedHashSet <Short> ret = CollectionHelper.newOrderedSet ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Short> newUnmodifiablePrimitiveOrderedSet (@Nullable final short... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveOrderedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static TreeSet <Boolean> newPrimitiveSortedSet (@Nullable final boolean... aValues)
  {
    final TreeSet <Boolean> ret = CollectionHelper.newSortedSet ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Boolean> newUnmodifiablePrimitiveSortedSet (@Nullable final boolean... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSortedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static TreeSet <Byte> newPrimitiveSortedSet (@Nullable final byte... aValues)
  {
    final TreeSet <Byte> ret = CollectionHelper.newSortedSet ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Byte> newUnmodifiablePrimitiveSortedSet (@Nullable final byte... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSortedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static TreeSet <Character> newPrimitiveSortedSet (@Nullable final char... aValues)
  {
    final TreeSet <Character> ret = CollectionHelper.newSortedSet ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Character> newUnmodifiablePrimitiveSortedSet (@Nullable final char... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSortedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static TreeSet <Double> newPrimitiveSortedSet (@Nullable final double... aValues)
  {
    final TreeSet <Double> ret = CollectionHelper.newSortedSet ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Double> newUnmodifiablePrimitiveSortedSet (@Nullable final double... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSortedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static TreeSet <Float> newPrimitiveSortedSet (@Nullable final float... aValues)
  {
    final TreeSet <Float> ret = CollectionHelper.newSortedSet ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Float> newUnmodifiablePrimitiveSortedSet (@Nullable final float... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSortedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static TreeSet <Integer> newPrimitiveSortedSet (@Nullable final int... aValues)
  {
    final TreeSet <Integer> ret = CollectionHelper.newSortedSet ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Integer> newUnmodifiablePrimitiveSortedSet (@Nullable final int... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSortedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static TreeSet <Long> newPrimitiveSortedSet (@Nullable final long... aValues)
  {
    final TreeSet <Long> ret = CollectionHelper.newSortedSet ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Long> newUnmodifiablePrimitiveSortedSet (@Nullable final long... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSortedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static TreeSet <Short> newPrimitiveSortedSet (@Nullable final short... aValues)
  {
    final TreeSet <Short> ret = CollectionHelper.newSortedSet ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Set <Short> newUnmodifiablePrimitiveSortedSet (@Nullable final short... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveSortedSet (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Boolean> newPrimitiveStack (@Nullable final boolean... aValues)
  {
    final NonBlockingStack <Boolean> ret = CollectionHelper.newStack ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Boolean> newUnmodifiablePrimitiveStack (@Nullable final boolean... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveStack (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Byte> newPrimitiveStack (@Nullable final byte... aValues)
  {
    final NonBlockingStack <Byte> ret = CollectionHelper.newStack ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Byte> newUnmodifiablePrimitiveStack (@Nullable final byte... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveStack (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Character> newPrimitiveStack (@Nullable final char... aValues)
  {
    final NonBlockingStack <Character> ret = CollectionHelper.newStack ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Character> newUnmodifiablePrimitiveStack (@Nullable final char... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveStack (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Double> newPrimitiveStack (@Nullable final double... aValues)
  {
    final NonBlockingStack <Double> ret = CollectionHelper.newStack ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Double> newUnmodifiablePrimitiveStack (@Nullable final double... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveStack (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Float> newPrimitiveStack (@Nullable final float... aValues)
  {
    final NonBlockingStack <Float> ret = CollectionHelper.newStack ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Float> newUnmodifiablePrimitiveStack (@Nullable final float... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveStack (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Integer> newPrimitiveStack (@Nullable final int... aValues)
  {
    final NonBlockingStack <Integer> ret = CollectionHelper.newStack ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Integer> newUnmodifiablePrimitiveStack (@Nullable final int... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveStack (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Long> newPrimitiveStack (@Nullable final long... aValues)
  {
    final NonBlockingStack <Long> ret = CollectionHelper.newStack ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Long> newUnmodifiablePrimitiveStack (@Nullable final long... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveStack (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Short> newPrimitiveStack (@Nullable final short... aValues)
  {
    final NonBlockingStack <Short> ret = CollectionHelper.newStack ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static List <Short> newUnmodifiablePrimitiveStack (@Nullable final short... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveStack (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static PriorityQueue <Boolean> newPrimitiveQueue (@Nullable final boolean... aValues)
  {
    final PriorityQueue <Boolean> ret = CollectionHelper.newQueue ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Collection <Boolean> newUnmodifiablePrimitiveQueue (@Nullable final boolean... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveQueue (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static PriorityQueue <Byte> newPrimitiveQueue (@Nullable final byte... aValues)
  {
    final PriorityQueue <Byte> ret = CollectionHelper.newQueue ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Collection <Byte> newUnmodifiablePrimitiveQueue (@Nullable final byte... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveQueue (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static PriorityQueue <Character> newPrimitiveQueue (@Nullable final char... aValues)
  {
    final PriorityQueue <Character> ret = CollectionHelper.newQueue ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Collection <Character> newUnmodifiablePrimitiveQueue (@Nullable final char... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveQueue (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static PriorityQueue <Double> newPrimitiveQueue (@Nullable final double... aValues)
  {
    final PriorityQueue <Double> ret = CollectionHelper.newQueue ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Collection <Double> newUnmodifiablePrimitiveQueue (@Nullable final double... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveQueue (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static PriorityQueue <Float> newPrimitiveQueue (@Nullable final float... aValues)
  {
    final PriorityQueue <Float> ret = CollectionHelper.newQueue ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Collection <Float> newUnmodifiablePrimitiveQueue (@Nullable final float... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveQueue (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static PriorityQueue <Integer> newPrimitiveQueue (@Nullable final int... aValues)
  {
    final PriorityQueue <Integer> ret = CollectionHelper.newQueue ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Collection <Integer> newUnmodifiablePrimitiveQueue (@Nullable final int... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveQueue (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static PriorityQueue <Long> newPrimitiveQueue (@Nullable final long... aValues)
  {
    final PriorityQueue <Long> ret = CollectionHelper.newQueue ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Collection <Long> newUnmodifiablePrimitiveQueue (@Nullable final long... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveQueue (aValues));
  }

  @Nonnull
  @ReturnsMutableCopy
  public static PriorityQueue <Short> newPrimitiveQueue (@Nullable final short... aValues)
  {
    final PriorityQueue <Short> ret = CollectionHelper.newQueue ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsImmutableObject
  public static Collection <Short> newUnmodifiablePrimitiveQueue (@Nullable final short... aValues)
  {
    return CollectionHelper.makeUnmodifiable (newPrimitiveQueue (aValues));
  }
}
